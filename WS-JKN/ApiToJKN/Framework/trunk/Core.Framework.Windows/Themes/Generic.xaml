<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:Windows="clr-namespace:Core.Framework.Windows.Windows"
                    xmlns:behaviors="clr-namespace:Core.Framework.Windows.Behaviors"
                    xmlns:Implementations="clr-namespace:Core.Framework.Windows.Implementations"
                    xmlns:converters="clr-namespace:Core.Framework.Windows.Converters">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Core.Framework.Windows;component/Styles/Controls.xaml"></ResourceDictionary>
        <ResourceDictionary Source="pack://application:,,,/Core.Framework.Windows;component/Themes/Generic/Brushes.xaml" />
        <ResourceDictionary  Source="pack://application:,,,/Core.Framework.Windows;component/Themes/Generic/Buttons.xaml" />
        <ResourceDictionary  Source="pack://application:,,,/Core.Framework.Windows;component/Themes/Generic/Common.xaml" />
        <ResourceDictionary  Source="pack://application:,,,/Core.Framework.Windows;component/Themes/Generic/Glyphs.xaml" />
        <ResourceDictionary  Source="pack://application:,,,/Core.Framework.Windows;component/Implementations/PropertyGrid/Themes/Generic.xaml" />
        <ResourceDictionary  Source="pack://application:,,,/Core.Framework.Windows;component/Implementations/ButtonSpinner/Themes/GenericSpinner.xaml" />
        <ResourceDictionary  Source="pack://application:,,,/Core.Framework.Windows;component/Implementations/NumericUpDown/Themes/Generic.xaml" />


        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/BusyDecorator.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Core.Framework.Windows;component/Styles/Colours.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Core.Framework.Windows;component/Styles/Fonts.xaml" />

        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/AppBarButton.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/Flyout.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/MetroContentControl.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/MetroImage.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/MetroProgressBar.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/MetroWindow.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/Pivot.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/Panorama.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/ProgressRing.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/RangeSlider.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/MetroAnimatedSingleRowTabControl.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/MetroTabControl.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/MetroTabItem.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/Tile.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/ToggleSwitch.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/TransitioningContentControl.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/Glow.xaml" />
        <ResourceDictionary Source="/Core.Framework.Windows;component/Themes/Dialogs/BaseMetroDialog.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:ThicknessLeftConverter x:Key="ThicknessLeftConverter"/>

    <Style TargetType="{x:Type Implementations:MultiSelectTreeViewItem}">
        <Style.Triggers>
            <DataTrigger
				Binding="{Binding (VirtualizingStackPanel.IsVirtualizing), RelativeSource={RelativeSource AncestorType={x:Type Implementations:MultiSelectTreeView}}, FallbackValue=True}"
				Value="True">
                <Setter Property="ItemsControl.ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel IsItemsHost="True"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
        <Style.Resources>
            <ResourceDictionary />
        </Style.Resources>

        <Setter Property="RemarksTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock VerticalAlignment="Center" Margin="3,0,0,0" Text="{Binding}">
						<TextBlock.Style>
							<Style TargetType="TextBlock">
								<Style.Triggers>
									<DataTrigger Binding="{Binding}" Value="{x:Null}">
										<Setter Property="Visibility" Value="Collapsed"/>
									</DataTrigger>
									<DataTrigger Binding="{Binding}" Value="">
										<Setter Property="Visibility" Value="Collapsed"/>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</TextBlock.Style>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        

        <!-- Windows Classic Theme colours -->
        <Setter Property="BorderBrushSelected" Value="{x:Null}"/>
        <Setter Property="BackgroundSelected" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="ForegroundSelected" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        <Setter Property="BorderBrushInactive" Value="{x:Null}"/>
        <Setter Property="BackgroundInactive" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="ForegroundInactive" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode"
			Value="{Binding (VirtualizingStackPanel.VirtualizationMode), RelativeSource={RelativeSource AncestorType={x:Type Implementations:MultiSelectTreeView}}, FallbackValue=Standard}"/>
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="False"/>
        <Setter Property="Panel.Background" Value="#00FFFFFF"/>
        <Setter Property="Control.HorizontalContentAlignment"
			Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Left}"/>
        <Setter Property="Control.VerticalContentAlignment"
			Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Center}"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0"/>
        <!-- Clear the default focus rectangle which would span the entire item in full width and with all visible children -->
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>

        <!-- Pass on the MultiSelectTreeView' HoverHighlighting value to each item because we couldn't access it otherwise in the triggers -->
        <Setter Property="HoverHighlighting"
			Value="{Binding (Implementations:MultiSelectTreeView.HoverHighlighting), RelativeSource={RelativeSource AncestorType={x:Type Implementations:MultiSelectTreeView}}, Mode=OneWay, FallbackValue=False}"/>
        <Setter Property="ItemIndent"
			Value="{Binding (Implementations:MultiSelectTreeView.ItemIndent), RelativeSource={RelativeSource AncestorType={x:Type Implementations:MultiSelectTreeView}}, Mode=OneWay, FallbackValue=13}"/>
        <Setter Property="IsKeyboardMode"
			Value="{Binding (Implementations:MultiSelectTreeView.IsKeyboardMode), RelativeSource={RelativeSource AncestorType={x:Type Implementations:MultiSelectTreeView}}, Mode=OneWay, FallbackValue=False}"/>

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Implementations:MultiSelectTreeViewItem}">
                    <StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <!-- Set the second column width to * to have the items border expand to the right edge -->
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <!-- region Expander button -->
                            <ToggleButton
								IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type Implementations:MultiSelectTreeViewItem}}, Path=IsExpanded, FallbackValue=False}"
								ClickMode="Press" Name="Expander">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Style.Resources>
                                            <ResourceDictionary />
                                        </Style.Resources>
                                        <Setter Property="UIElement.Focusable" Value="False"/>
                                        <Setter Property="FrameworkElement.Width" Value="12"/>
                                        <Setter Property="FrameworkElement.Height" Value="16"/>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <!-- Default expander 'plus' graphic -->
                                                    <Border Padding="1,2,0,0" Background="#00FFFFFF" Width="12" Height="16">
                                                        <Border
															BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Background="White"
															Width="9" Height="9"
															SnapsToDevicePixels="True">
                                                            <Path
																Name="ExpandPath"
																Data="M0,2L0,3 2,3 2,5 3,5 3,3 5,3 5,2 3,2 3,0 2,0 2,2z"
																Fill="#FF000000"
																Margin="1,1,1,1" />
                                                        </Border>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <!-- Replace with 'minus' graphic the node is expanded -->
                                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                            <Setter Property="Path.Data" TargetName="ExpandPath">
                                                                <Setter.Value>
                                                                    <StreamGeometry>M0,2L0,3 5,3 5,2z</StreamGeometry>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <!-- endregion Expander button -->

                            <!-- region Element grid -->
                            <StackPanel Grid.Column="1" Orientation="Horizontal">
                                <Grid Name="ElementGrid">
                                    <Border Name="headerBorder"
										BorderThickness="{TemplateBinding Border.BorderThickness}"
										Padding="{TemplateBinding Control.Padding}"
										Margin="0,0,0,-1"
										BorderBrush="{TemplateBinding Border.BorderBrush}"
										Background="{TemplateBinding Panel.Background}"
										SnapsToDevicePixels="True"
										VerticalAlignment="Center">
                                        <ContentPresenter Name="PART_Header"
											FocusManager.IsFocusScope="True"
											Content="{TemplateBinding HeaderedContentControl.Header}"
											ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
											ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
											ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
											ContentSource="Header"
											HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
											VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
											SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                    </Border>
                                    <!-- Focus rectangle inside the item -->
                                    <Rectangle StrokeDashArray="0.5 1.5" StrokeThickness="1" Stroke="Black" SnapsToDevicePixels="True" Margin="1,1,1,0"
										Visibility="Hidden" Name="FocusRectangle" IsHitTestVisible="False"/>
                                </Grid>

                                <ContentPresenter
									Content="{TemplateBinding Remarks}"
									ContentTemplate="{TemplateBinding RemarksTemplate}"
									SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            </StackPanel>
                            <!-- endregion Element grid -->
                        </Grid>
                        <Grid Name="ItemsHostGrid" Margin="{TemplateBinding ItemIndent, Converter={StaticResource ThicknessLeftConverter}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Path Data="M0,0 L0,1" Stretch="Uniform" Name="RulerPath"
								Stroke="#60000000" StrokeDashArray="0.5 2.5"
								SnapsToDevicePixels="True" Margin="0,0,1,0"/>

                            <ItemsPresenter Grid.Column="1" Name="ItemsHost"/>
                        </Grid>
                    </StackPanel>
                    <ControlTemplate.Triggers>

                        <!-- Set the visibility of the item -->
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="FrameworkElement.Visibility" Value="Collapsed"/>
                        </Trigger>

                        <!-- Set the foreground, border and background when the item is selected -->
                        <Trigger Property="Implementations:MultiSelectTreeViewItem.IsSelected" Value="True">
                            <Setter Property="Control.Background"
								Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="TextElement.Foreground"
								Value="{Binding ForegroundSelected, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>

                        <!-- Show the focus rectangle when the item is focused -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Implementations:MultiSelectTreeViewItem.IsKeyboardMode" Value="True"/>
                                <Condition Property="Implementations:MultiSelectTreeViewItem.IsFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="FocusRectangle" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>

                        <!-- Make all selected items grey when the entire Window is inactive -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition
									Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=IsActive, FallbackValue=False}"
									Value="False"/>
                                <Condition
									Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}"
									Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Control.Background"
								Value="{Binding BackgroundInactive, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="TextElement.Foreground"
								Value="{Binding ForegroundInactive, RelativeSource={RelativeSource Self}}"/>
                        </MultiDataTrigger>

                        <!-- Make all selected items grey when none of this TreeView's items is focused (i.e. the TreeView is not focused) -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition
									Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Implementations:MultiSelectTreeView}}, Path=IsKeyboardFocusWithin, FallbackValue=False}"
									Value="False"/>
                                <Condition
									Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Implementations:MultiSelectTreeView}}, Path=ContextMenu.IsOpen, FallbackValue=False}"
									Value="False"/>
                                <Condition
									Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}"
									Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Control.Background"
								Value="{Binding BackgroundInactive, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="TextElement.Foreground"
								Value="{Binding ForegroundInactive, RelativeSource={RelativeSource Self}}"/>
                        </MultiDataTrigger>

                        <!-- Collapse the child items host if the node is not expanded -->
                        <Trigger Property="Implementations:MultiSelectTreeViewItem.IsExpanded" Value="False">
                            <Setter Property="UIElement.Visibility" TargetName="ItemsHostGrid" Value="Collapsed"/>
                        </Trigger>

                        <!-- Hide the expander button if there are no child nodes -->
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="UIElement.Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>

                        <!-- Use grey text colour when the item is not enabled -->
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>

                        <!-- Hide vertical rulers if disabled -->
                        <DataTrigger
							Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Implementations:MultiSelectTreeView}}, Path=VerticalRulers, FallbackValue=False}"
							Value="False">
                            <Setter TargetName="RulerPath" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>

                        <!-- Use a different template and colours in edit mode -->
                        <Trigger Property="Implementations:MultiSelectTreeViewItem.IsEditing" Value="True">
                            <Setter Property="HeaderTemplate"
								Value="{Binding ContentTemplateEdit, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Control.Background"
								Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="FocusRectangle" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Implementations:MultiSelectTreeView}">
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="True">
                <Setter Property="ItemsControl.ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel IsItemsHost="True" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Style.Resources>
            <ResourceDictionary />
        </Style.Resources>
        <Setter Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="False" />
        <Setter Property="Border.BorderThickness" Value="2" />
        <Setter Property="Control.Padding" Value="0" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Implementations:MultiSelectTreeView}">
                    <Border Name="Bd"
						SnapsToDevicePixels="True">
                        <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" BorderThickness="0,0,1,1">
                            <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" BorderThickness="1,1,0,0">
                                <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" BorderThickness="0,0,1,1">
                                    <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" BorderThickness="1,1,0,0">
                                        <ScrollViewer Name="scrollViewer"
											CanContentScroll="True"
											HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
											VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
											Background="{TemplateBinding Panel.Background}"
											Padding="{TemplateBinding Control.Padding}"
											SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
											Focusable="False">
                                            <ScrollViewer.Resources>
                                                <Style TargetType="ScrollBar">
                                                    <!-- Fix that improper scrollbar handle drawing common in WPF -->
                                                    <Setter Property="UseLayoutRounding" Value="True"/>
                                                </Style>
                                            </ScrollViewer.Resources>
                                            <Grid Margin="0,0,0,1">
                                                <!-- Compensate bottom margin -1 for last item -->
                                                <ItemsPresenter Name="content"/>
                                                <Canvas>
                                                    <Border Name="selectionBorder"
														BorderBrush="{Binding BorderBrushSelectionRectangle, RelativeSource={RelativeSource AncestorType=Implementations:MultiSelectTreeView}}"
														Background="{Binding BackgroundSelectionRectangle, RelativeSource={RelativeSource AncestorType=Implementations:MultiSelectTreeView}}"
														BorderThickness="1"
														VerticalAlignment="Top" HorizontalAlignment="Left"
														Visibility="Collapsed"/>
                                                </Canvas>
                                            </Grid>
                                        </ScrollViewer>
                                    </Border>
                                </Border>
                            </Border>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="Panel.Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- DockPane default style-->
    <Style TargetType="{x:Type Windows:DockPane}">
        <Setter Property="Template"
                Value="{DynamicResource DockPaneTemplate}" />
        <Setter Property="Background"
                Value="{DynamicResource DockPaneBackgroundBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource DockPaneBorderBrush}" />
        <Setter Property="CondencedDockPanelTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border CornerRadius="0,0,2,2"
                            Background="{DynamicResource DockPaneBackgroundBrush}"
                            Margin="2"
                            TextBlock.Foreground="{DynamicResource DockPaneHeaderForegroundBrush}">
                        <DockPanel>
                            <Image Source="{Binding Icon}"
                                   Margin="2,0,2,0"
                                   DockPanel.Dock="Left" />

                            <ContentControl Content="{Binding Header}"
                                            Margin="0,0,2,0" />
                        </DockPanel>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentControl Content="{TemplateBinding Content}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DockPointBorder"
           TargetType="{x:Type Border}">
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="BorderThickness"
                Value="2" />
        <Setter Property="HorizontalAlignment"
                Value="Center" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Windows:DocumentContainer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Windows:DocumentContainer}">
                    <ControlTemplate.Resources>

                        <!-- Implicit GridSplitter Style -->
                        <Style TargetType="{x:Type GridSplitter}">
                            <Setter Property="Background"
                                    Value="Transparent" />
                        </Style>

                    </ControlTemplate.Resources>
                    <Grid Background="Transparent">

                        <!-- Document Content -->
                        <TabControl x:Name="PART_DOCUMENTS"
                                    ItemsSource="{TemplateBinding Documents}"
                                    Background="Transparent"
                                    SelectedIndex="0" >
                            <TabControl.ItemContainerStyle>
                                <Style TargetType="TabItem">
                                    <Setter Property="Header"
                                            Value="{Binding Header}" />
                                    <Setter Property="Content"
                                            Value="{Binding Content}" />
                                    <Setter Property="Background"
                                            Value="{DynamicResource DockPaneBackgroundBrush}" />
                                    <!--        <Setter Property="Foreground"
                                            Value="{DynamicResource DockPaneHeaderForegroundBrush}" />-->
                                    <Setter Property="Template"
                                            Value="{DynamicResource DockedContentTabItem}" />
                                    <Setter Property="ContextMenu" Value="{DynamicResource ContextTabItem}" />
                                </Style>
                            </TabControl.ItemContainerStyle>
                        </TabControl>

                        <!-- Content Presenter -->
                        <ContentPresenter />

                        <Grid x:Name="PART_DOCK_POINTS"
                              Visibility="Collapsed">
                            <Grid>
                                <Image Source="/Core.Framework.Windows;component/Resources/DockHexagon.png" />
                                <Grid HorizontalAlignment="Center"
                                      VerticalAlignment="Center">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Border Style="{StaticResource DockPointBorder}"
                                            Grid.Row="0"
                                            Grid.Column="1">
                                        <i:Interaction.Behaviors>
                                            <behaviors:ContentDockBehavior DockPoint="Top" />
                                        </i:Interaction.Behaviors>
                                        <Image Source="/Core.Framework.Windows;component/Resources/SplitTop.png" />
                                    </Border>
                                    <Border Style="{StaticResource DockPointBorder}"
                                            Grid.Row="1"
                                            Grid.Column="0">
                                        <i:Interaction.Behaviors>
                                            <behaviors:ContentDockBehavior DockPoint="Left" />
                                        </i:Interaction.Behaviors>
                                        <Image Source="/Core.Framework.Windows;component/Resources/SplitLeft.png" />
                                    </Border>
                                    <Border Style="{StaticResource DockPointBorder}"
                                            Grid.Row="1"
                                            Grid.Column="2">
                                        <i:Interaction.Behaviors>
                                            <behaviors:ContentDockBehavior DockPoint="Right" />
                                        </i:Interaction.Behaviors>
                                        <Image Source="/Core.Framework.Windows;component/Resources/SplitRight.png" />
                                    </Border>
                                    <Border Style="{StaticResource DockPointBorder}"
                                            Grid.Row="1"
                                            Grid.Column="1">
                                        <i:Interaction.Behaviors>
                                            <behaviors:ContentDockBehavior DockPoint="Content" />
                                        </i:Interaction.Behaviors>
                                        <Image Source="/Core.Framework.Windows;component/Resources/DockCenter.png" />
                                    </Border>
                                    <Border Style="{StaticResource DockPointBorder}"
                                            Grid.Row="2"
                                            Grid.Column="1">
                                        <i:Interaction.Behaviors>
                                            <behaviors:ContentDockBehavior DockPoint="Bottom" />
                                        </i:Interaction.Behaviors>
                                        <Image Source="/Core.Framework.Windows;component/Resources/SplitBottom.png" />
                                    </Border>
                                </Grid>
                            </Grid>
                        </Grid>

                        <!-- Illustrates future window docked position 
                 NOTE: IsHitTestVisible must be set to false for this dock pane -->
                        <DockPanel x:Name="PART_DOCK_ILLUSTRATION"
                                   LastChildFill="false"
                                   IsHitTestVisible="false" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>