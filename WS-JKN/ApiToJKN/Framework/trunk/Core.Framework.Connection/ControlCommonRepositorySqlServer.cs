using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Core.Framework.Helper;
using Core.Framework.Helper.Contracts;
using Core.Framework.Helper.Logging;
using Core.Framework.Model;
using Core.Framework.Model.Attr;


namespace Core.Framework.Connection
{
    public class ControlCommonRepositorySqlServer : IControlCommonRepository
    {
        #region Implementation of IControlCommonRepository

        public event EventHandler<FilterQueryArgs> FilterQuery;

        public void OnFilterQuery(FilterQueryArgs e)
        {
            EventHandler<FilterQueryArgs> handler = this.FilterQuery;
            if (handler != null) handler(this, e);
        }

        public IEnumerable<object> GetBaseData(string keyDomain, string field, object value, object parameters = null)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<object> GetBaseData(string keyDomain, string field, object value, SearchType type, object parameters = null)
        {
            try
            {   //Untuk searching di Memmory

                if (string.IsNullOrEmpty(keyDomain))
                    return null;
                var domain = HelperManager.GetTableItem(keyDomain);

                if (domain == null)
                {
                    var resultCache = CacheHelper.GetCache(keyDomain + value.ToString() + field);
                    if (resultCache != null)
                        if (!string.IsNullOrEmpty(resultCache.ToString()))
                            return (List<object>)resultCache;
                    if (value == null)
                        value = "";
                    var items = HelperManager.GetSearchFramwork(keyDomain, value.ToString(), field, parameters).OfType<object>().ToList();
                    CacheHelper.RegisterCache(keyDomain + value.ToString() + field, items, 20);
                    return items;
                }
                var connectionManagerTest = BaseDependency.Get<ISettingRepository>();
                var model = Activator.CreateInstance(domain) as TableItem;
                if (model == null) return null;
                var result = CacheHelper.GetCache(keyDomain + field + value + type);
                if (!string.IsNullOrEmpty(result.ToString()) && model.TableName.EndsWith("_M"))
                {
                    return (IEnumerable<object>)result;
                }
                using (var contextManager = new ContextManager(connectionManagerTest.ConnectionString))
                {
                    var propertyKodeProfileInfo = domain.GetProperty("KdProfile");
                    var propertyStatusEnalbedInfo = domain.GetProperty("StatusEnabled");
                    IEnumerable<object> data;
                    if (propertyKodeProfileInfo == null)
                    {
                        data =
                           contextManager.GetRow(model).OrderBy(
                               n => n.GetType().GetProperty(field).GetValue(n, null));

                        return data;
                    }
                    if (propertyStatusEnalbedInfo == null)
                    {
                        data =
                           contextManager.GetRow(Activator.CreateInstance(domain)).Where(n => Convert.ToInt16(n.GetType().GetProperty("KdProfile").GetValue(n, null)) == Convert.ToInt16(connectionManagerTest.CurrentProfile().CodeProfile)).OrderBy(
                               n => n.GetType().GetProperty(field).GetValue(n, null));

                        return data;
                    }
                    //data =contextManager.GetRow(Activator.CreateInstance(domain));
                    var listObject = new List<object>();
                    var firstOrDefault = model.GetType().GetProperty(field).GetCustomAttributes(true).OfType<FieldAttribute>().FirstOrDefault();
                    if (firstOrDefault != null)
                    {
                        field = firstOrDefault.FieldName;
                    }
                    var selection = "";
                    var tableItem = model.TableName;
                    foreach (var property in model.GetType().GetProperties(
                            BindingFlags.NonPublic |
                            BindingFlags.Instance | BindingFlags.Public).Where(
                                n =>
                                (n.GetCustomAttributes(true).OfType<SkipAttribute>().Count() == 0 ||
                                n.GetCustomAttributes(true).OfType<RealtionStringAndSparatorAutoIncrementAttribute>().Count() != 0
                                || n.GetCustomAttributes(true).OfType<RealtionStringAutoIncrementAttribute>().Count() != 0
                                || n.GetCustomAttributes(true).OfType<AutoGenerateDateTimeYYMMAttribute>().Count() != 0
                                || n.GetCustomAttributes(true).OfType<CustomCharAutoIncrement>().Count() != 0
                                || n.GetCustomAttributes(true).OfType<CustomIntAutoIncrement>().Count() != 0

                                ) && (
                                    n.GetCustomAttributes(true).OfType<FieldAttribute>().Count() != 0 ||
                                    n.GetCustomAttributes(true).OfType<ReferenceAttribute>().Count() != 0)).Select(n => n.GetCustomAttributes(true).OfType<FieldAttribute>().FirstOrDefault())

                        )
                    {
                        if (property != null)
                            selection += ((!string.IsNullOrEmpty(selection)) ? "," : "") + "[" + tableItem + "]." + "[" + property.FieldName + "]";
                        //if (!temp.Any(n => n.Equals(property.FieldName)))
                        //    list.Add("[" + tableItem + "]." + "[" + property.FieldName + "]");

                    }
                    var sql = "select top 20 " + selection + " from " + model.TableName + " where " + field + " ";
                    if (type == SearchType.Contains)
                        sql += " like '%" + value + "%' ";
                    if (type == SearchType.Equal)
                        sql += " = '" + value + "' ";
                    if (model is ActiveTable) sql += " and (StatusEnabled='1' or StatusEnabled='3')";
                    if (model is ProfileTable) sql += " and (KdProfile='" + connectionManagerTest.CurrentProfile().CodeProfile + "')";
                    sql += " order by " + "[" + tableItem + "]." + "" + field + "";

                    var reader = contextManager.ExecuteQuery(sql);
                    while (reader.Read())
                    {
                        model = Activator.CreateInstance(domain) as TableItem;
                        if (model != null)
                        {
                            model.OnInit(reader, contextManager);
                            listObject.Add(model);
                        }
                    }
                    data = listObject;
                    var baseData = data.ToArray();
                    var args = new FilterQueryArgs(baseData, keyDomain, parameters);
                    this.OnFilterQuery(args);
                    //args.Item = args.Item.Where(n =>
                    //                  Convert.ToInt16(n.GetType().GetProperty("KdProfile").GetValue(n, null)) ==
                    //                  Convert.ToInt16(connectionManagerTest.CurrentProfile().CodeProfile)
                    //                  &&
                    //                  (Convert.ToInt16(n.GetType().GetProperty("StatusEnabled").GetValue(n, null)) == 1 ||
                    //                   Convert.ToInt16(n.GetType().GetProperty("StatusEnabled").GetValue(n, null)) == 3)
                    //    ).OrderBy(
                    //        n => n.GetType().GetProperty(field).GetValue(n, null));
                    if (model.TableName.EndsWith("_M"))
                        CacheHelper.RegisterCache(keyDomain + field + value + type, args.Item, -1);
                    return args.Item;

                }
            }
            catch (Exception exception)
            {

                Log.Error(exception);
                return null;
            }
        }

        public IEnumerable<object> GetBaseData(Type keyDomain, string field, object value, SearchType type, object parameters = null)
        {
            return GetBaseData(Activator.CreateInstance(keyDomain).GetType().FullName, field, value, type, parameters);
        }

        #endregion
    }
}
